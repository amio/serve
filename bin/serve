#!/usr/bin/env node

/**
 * Module dependencies.
 */

var resolve = require('path').resolve
  , join = require('path').join
  , exec = require('child_process').exec
  , program = require('commander')
  , connect = require('connect')
  , morgan = require('morgan')
  , compression = require('compression')
  , serveFavicon = require('serve-favicon')
  , serveStatic = require('serve-static')
  , serveIndex = require('serve-index')
  , basicAuth = require('basic-auth-connect')
  , open = require('opn')
  , stylus = require('stylus')
  , less = require('less-middleware')
  , url = require('url')
  , fs = require('fs')
  , https = require('https');

var serveHTTPS = require('../lib/https.js')

// CLI

program
  .version(require('../package.json').version)
  .usage('[options] [dir]')
  .option('-o, --open', 'automatically opens a browser window to this server')
  .option('-a, --auth <user>:<pass>', 'specify basic auth credentials')
  .option('-F, --format <fmt>', 'specify the log format string', 'dev')
  .option('-p, --port <port>', 'specify the port [3000]', Number, 3000)
  .option('-r, --root <root>', 'specify the root directory []', String, "")
  .option('    --https-port <port>', 'specify the port [3443]', Number, 3443)
  .option('-H, --hidden', 'enable hidden file serving')
  .option('-S, --no-stylus', 'disable stylus rendering')
  .option('    --no-less', 'disable less css rendering')
  .option('-I, --no-icons', 'disable icons')
  .option('-L, --no-logs', 'disable request logging')
  .option('-D, --no-dirs', 'disable directory serving')
  .option('-f, --favicon <path>', 'serve the given favicon')
  .option('-C, --cors', 'allows cross origin access serving')
  .option('-s, --https', 'also serve over https')
  .option('    --key', 'key file path for https')
  .option('    --cert', 'certificate file for https')
  .option('    --ca', 'CA certificate file for https')
  .option('    --compress', 'gzip or deflate the response')
  .option('    --exec <cmd>', 'execute command on each request')
  .parse(process.argv);

// path
var path = resolve(program.args.shift() || '.');
path = path + "/" + program.root;

// setup the server
var server = connect();

// basic auth

if (program.auth) {
  var user = program.auth.split(':')[0];
  var pass = program.auth.split(':')[1];
  if (!user || !pass) throw new Error('user and pass required');
  server.use(basicAuth(user, pass));
}

// ignore favicon
server.use(serveFavicon(program.favicon || join(__dirname, '../favicon.ico')));

// logger
if (program.logs) server.use(morgan(program.format));

// convert .styl to .css to trick stylus.middleware
if (program.stylus) {
  server.use(function(req, res, next){
    req.url = req.url.replace(/\.styl$/, '.css');
    next();
  });
}

// stylus
server.use(stylus.middleware({ src: path }));

// less
if (program.less) {
  server.use(less(path));
}

// CORS access for files
if (program.cors) {
  server.use(function(req, res, next){
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With, Accept, x-csrf-token, origin');
    if ('OPTIONS' == req.method) return res.end();
    next();
  });
}

// compression
if (program.compress) {
  server.use(compression());
}

// exec command
if (program.exec) {
  server.use(function (req, res, next){
    exec(program.exec, next);
  });
}

// static files
server.use(serveStatic(path, { hidden: program.hidden }));

// directory serving
if (program.dirs) {
    server.use(serveIndex(path, {
      hidden: program.hidden
    , icons: program.icons
  }));
}

// if requested, setup https server as well
if (program.https) {
  serveHTTPS(program, server, path)
}

function onError (err) {
  switch (err.code) {
    case 'EADDRINUSE':
      console.error('\033[33mWARN:\033[90m Port \033[33m%d\033[90m is already in use.', err.port);
      launch(err.port + 1);
      break;
    default:
      throw err;
  }
}

function launch (port) {
  return server.listen(port, function () {
    // Successful message
    console.log('\033[90mServing \033[36m%s\033[90m on port \033[96m%d\033[0m', path, port);

    // open the browser window to this server
    if (program.open) {
      if (program.https) {
        open('https://127.0.0.1:' + program.httpsPort)
      } else {
        open('http://127.0.0.1:' + port)
      }
    }
  }).on('error', onError);
}

// start the server
launch(program.port)
